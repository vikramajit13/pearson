[{"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\index.js":"1","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\reportWebVitals.js":"2","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\App.js":"3","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.jsx":"4","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Utility\\helpers.js":"5","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\stubData\\stubData.js":"6","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.jsx":"7","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.styles.jsx":"8","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.styles.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":288,"mtime":1607491579939,"results":"13","hashOfConfig":"11"},{"size":4778,"mtime":1607490330911,"results":"14","hashOfConfig":"11"},{"size":3483,"mtime":1607490141584,"results":"15","hashOfConfig":"11"},{"size":5607,"mtime":1607323920822,"results":"16","hashOfConfig":"11"},{"size":775,"mtime":1607490698503,"results":"17","hashOfConfig":"11"},{"size":611,"mtime":1607482853559,"results":"18","hashOfConfig":"11"},{"size":599,"mtime":1607490701754,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4nvwm4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\index.js",[],["41","42"],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\reportWebVitals.js",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\App.js",["43"],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.jsx",["44","45","46","47"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Styledselect,\r\n  Searchdiv,\r\n  SearchOuterdiv,\r\n  Innerdiv,\r\n  Styleddiv,\r\n} from \"./Countries.styles\";\r\n\r\nimport {\r\n  getCountries,\r\n  filterCountries,\r\n  filterCityMonth,\r\n  sortData,\r\n} from \"../Utility/helpers\";\r\nimport { TableComponent } from \"../Component/TableComponent\";\r\n\r\nexport const CountriesContainer = () => {\r\n  const [allData, setAllData] = useState([]);\r\n  const [allFilteredData, setAllFilteredData] = useState([]);\r\n  const [secondTableData, setSecondTableData] = useState([]);\r\n  const [allThirdTable, setAllThirdTable] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [city, setCity] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const countries = getCountries(); // async - await\r\n    setAllData(countries);\r\n    setSecondTableData(countries);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const filteredData = filterCountries(allData, \"country\", [\"city\", \"month\"]);\r\n    const thirdTableData = filterCountries(allData, \"country\", [\"year\"]);\r\n    setFilteredData(filteredData);\r\n    setAllThirdTable(thirdTableData);\r\n    setAllFilteredData(filteredData);\r\n  }, [allData]);\r\n\r\n  useEffect(() => {\r\n    const filterData = filterCityMonth(allFilteredData, city, month);\r\n    setFilteredData(filterData);\r\n  }, [city, month]);\r\n\r\n  const tableOneColumns = useMemo(() => [\r\n    {\r\n      title: \"Country\",\r\n      id: \"country\",\r\n    },\r\n    { title: \"City\", id: \"city\" },\r\n    {\r\n      title: \"Month\",\r\n      id: \"month\",\r\n    },\r\n    {\r\n      title: \"Average Temp\",\r\n      id: \"avg\",\r\n    },\r\n  ]);\r\n  const tableTwoColumns = useMemo(() => [\r\n    {\r\n      title: \"Country\",\r\n      id: \"country\",\r\n    },\r\n    { title: \"City\", id: \"city\" },\r\n    {\r\n      title: \"Month\",\r\n      id: \"month\",\r\n    },\r\n    {\r\n      title: \"Year\",\r\n      id: \"year\",\r\n    },\r\n    {\r\n      title: \"Temp\",\r\n      id: \"temp\",\r\n    },\r\n  ]);\r\n\r\n  const tableThreeColumns = useMemo(() => [\r\n    {\r\n      title: \"Country\",\r\n      id: \"country\",\r\n    },\r\n    {\r\n      title: \"Year\",\r\n      id: \"year\",\r\n    },\r\n    { title: \"Max Temp\", id: \"maxTemp\" },\r\n    { title: \"Min Temp\", id: \"minTemp\" },\r\n    {\r\n      title: \"Average Temp\",\r\n      id: \"avg\",\r\n    },\r\n  ]);\r\n\r\n  const handleCitySelect = ({ target }) => {\r\n    const { value } = target;\r\n    setCity(value);\r\n  };\r\n  const handleMonthSelect = ({ target }) => {\r\n    const { value } = target;\r\n    setMonth(value);\r\n  };\r\n\r\n  const handleTempSort = ({ target }) => {\r\n    const { value } = target;\r\n    if (value) {\r\n      const sortedData = sortData(allData, value);\r\n      setSecondTableData(sortedData);\r\n    } else {\r\n      setSecondTableData(allData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Styleddiv>\r\n      <SearchOuterdiv>\r\n        <Searchdiv>\r\n          <Styledselect onChange={handleCitySelect}>\r\n            <option value=\"\">Select city</option>\r\n            <option value=\"Sydney\">Sydney</option>\r\n            <option value=\"Melbourne\">Melbourne</option>\r\n            <option value=\"Adelaide\">Adelaide</option>\r\n            <option value=\"Perth\">Perth</option>\r\n            <option value=\"Auckland\">Auckland</option>\r\n            <option value=\"Christchurch\">Christchurch</option>\r\n            <option value=\"Wellington\">Wellington</option>\r\n          </Styledselect>\r\n          <Styledselect onChange={handleMonthSelect}>\r\n            <option value=\"\">Select month</option>\r\n            <option value=\"01\">01</option>\r\n            <option value=\"02\">02</option>\r\n            <option value=\"03\">03</option>\r\n            <option value=\"04\">04</option>\r\n            <option value=\"05\">05</option>\r\n            <option value=\"06\">06</option>\r\n            <option value=\"07\">07</option>\r\n            <option value=\"08\">08</option>\r\n            <option value=\"09\">09</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"11\">11</option>\r\n            <option value=\"12\">12</option>\r\n          </Styledselect>\r\n        </Searchdiv>\r\n        <Innerdiv>\r\n          <TableComponent data={filteredData} columns={tableOneColumns} />\r\n        </Innerdiv>\r\n      </SearchOuterdiv>\r\n      <SearchOuterdiv>\r\n        <Searchdiv>\r\n          <Styledselect onChange={handleTempSort}>\r\n            <option value=\"\">Select Sorting Order</option>\r\n            <option value=\"asc\">Asc</option>\r\n            <option value=\"desc\">Desc</option>\r\n          </Styledselect>\r\n        </Searchdiv>\r\n        <Innerdiv>\r\n          <TableComponent data={secondTableData} columns={tableTwoColumns} />\r\n        </Innerdiv>\r\n      </SearchOuterdiv>\r\n\r\n      <Innerdiv>\r\n        <TableComponent data={allThirdTable} columns={tableThreeColumns} />\r\n      </Innerdiv>\r\n    </Styleddiv>\r\n  );\r\n};\r\n","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Utility\\helpers.js",["48","49"],"import { reduce, map, filter, orderBy } from \"lodash\";\r\nimport { data } from \"../stubData/stubData\";\r\n\r\nlet finalObj = [];\r\nconst flatArray = (data) =>\r\n  reduce(\r\n    data,\r\n    (result, obj) => {\r\n      const interimData = map(obj, (val) => val);\r\n      return [...result, ...interimData];\r\n    },\r\n    []\r\n  );\r\n\r\nconst getMonthAndYear = (date) => {\r\n  if (date) {\r\n    const splitDate = date.split(\"/\");\r\n    const month = splitDate[1];\r\n    const year = splitDate[2];\r\n    return { month: splitDate[1], year: splitDate[2] };\r\n  }\r\n  return { month: \"\", year: \"\" };\r\n};\r\n\r\n/**\r\n * make an axios/Ajax call\r\n * async () => { ... await axios.get(....)}\r\n * as data is already object skipping this step\r\n */\r\nexport const getCountries = () => {\r\n  const { countries } = data;\r\n\r\n  return reduce(\r\n    countries,\r\n    (result, value) => {\r\n      const { country, date, city, temp } = value;\r\n      const { month, year } = getMonthAndYear(date);\r\n      return [\r\n        ...result,\r\n        {\r\n          country,\r\n          city,\r\n          temp,\r\n          month,\r\n          year,\r\n        },\r\n      ];\r\n    },\r\n    []\r\n  );\r\n};\r\n\r\nconst calculateValues = (data, key) => {\r\n  return reduce(\r\n    data,\r\n    (result, value) => {\r\n      const { month, year, temp, country, city } = value;\r\n      const id = value[key];\r\n      if (!result[id]) {\r\n        result[id] = {\r\n          month,\r\n          temp: temp,\r\n          avg: temp,\r\n          maxTemp: temp,\r\n          minTemp: temp,\r\n          count: 1,\r\n          country,\r\n          city,\r\n          year,\r\n        };\r\n      } else {\r\n        result[id].count += 1;\r\n        result[id].maxTemp =\r\n          temp > result[id].maxTemp ? temp : result[id].maxTemp;\r\n        result[id].minTemp =\r\n          temp < result[id].minTemp ? temp : result[id].minTemp;\r\n        result[id].temp += temp;\r\n        result[id].avg = parseInt(result[id].temp / result[id].count).toFixed(\r\n          2\r\n        );\r\n      }\r\n      return { ...result };\r\n    },\r\n    {}\r\n  );\r\n};\r\n\r\nconst initReduce = (data, key) => {\r\n  return reduce(\r\n    data,\r\n    (result, value) => {\r\n      const id = value[key];\r\n      if (result[id]) result[id] = [...result[id], { ...value }];\r\n      else result[id] = [{ ...value }];\r\n      return { ...result };\r\n    },\r\n    {}\r\n  );\r\n};\r\n\r\nconst genericReducer = (returnedData, keys, curr) =>\r\n  reduce(\r\n    returnedData,\r\n    (result, data, id) => {\r\n      if (curr + 1 === keys.length) {\r\n        const newData = calculateValues(data, keys[curr]);\r\n        finalObj = [...finalObj, { ...newData }];\r\n        result[id] = newData;\r\n      }\r\n      if (curr + 1 < keys.length) {\r\n        const reducedData = initReduce(data, keys[curr]);\r\n        result[id] = genericReducer(reducedData, keys, curr + 1);\r\n      }\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n\r\nexport const filterCountries = (data, groupBy, keys) => {\r\n  const filteredData = initReduce(data, groupBy);\r\n  genericReducer(filteredData, keys, 0);\r\n  const flattenedArray = flatArray(finalObj);\r\n  finalObj = [];\r\n  return flattenedArray;\r\n};\r\n\r\nexport const filterCityMonth = (dataSet, city, month) => {\r\n  let data = [...dataSet];\r\n  if (city) {\r\n    data = filter(data, (x) => x.city === city);\r\n  }\r\n  if (month) {\r\n    data = filter(data, (x) => x.month === month);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const sortData = (dataSet, sort) => {\r\n  let data = [...dataSet];\r\n  if (sort) {\r\n    return orderBy(data, [\"temp\"], [sort]);\r\n  }\r\n  return data;\r\n};\r\n","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\stubData\\stubData.js",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.jsx",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.styles.jsx",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.styles.jsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":8,"nodeType":"56","messageId":"57","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"59","line":44,"column":6,"nodeType":"60","endLine":44,"endColumn":19,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":46,"column":27,"nodeType":"56","endLine":46,"endColumn":34},{"ruleId":"58","severity":1,"message":"62","line":61,"column":27,"nodeType":"56","endLine":61,"endColumn":34},{"ruleId":"58","severity":1,"message":"62","line":81,"column":29,"nodeType":"56","endLine":81,"endColumn":36},{"ruleId":"54","severity":1,"message":"63","line":18,"column":11,"nodeType":"56","messageId":"57","endLine":18,"endColumn":16},{"ruleId":"54","severity":1,"message":"64","line":19,"column":11,"nodeType":"56","messageId":"57","endLine":19,"endColumn":15},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allFilteredData'. Either include it or remove the dependency array.","ArrayExpression",["67"],"React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'month' is assigned a value but never used.","'year' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [allFilteredData, city, month]",{"range":"70","text":"71"},[1371,1384],"[allFilteredData, city, month]"]