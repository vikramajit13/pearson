[{"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\index.js":"1","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\reportWebVitals.js":"2","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\App.js":"3","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.jsx":"4","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Utility\\helpers.js":"5","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\stubData\\stubData.js":"6","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.jsx":"7","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.styles.jsx":"8","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.styles.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":288,"mtime":1607491579939,"results":"13","hashOfConfig":"11"},{"size":5048,"mtime":1607520161662,"results":"14","hashOfConfig":"11"},{"size":3483,"mtime":1607490141584,"results":"15","hashOfConfig":"11"},{"size":5607,"mtime":1607323920822,"results":"16","hashOfConfig":"11"},{"size":1054,"mtime":1607520076877,"results":"17","hashOfConfig":"11"},{"size":611,"mtime":1607482853559,"results":"18","hashOfConfig":"11"},{"size":599,"mtime":1607490701754,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4nvwm4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\index.js",[],["41","42"],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\reportWebVitals.js",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\App.js",["43"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CountriesContainer } from \"./Container/Countries\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <h2> Weather App</h2>\n      </div>\n      <CountriesContainer />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.jsx",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Utility\\helpers.js",["44","45"],"import { reduce, map, filter, orderBy } from \"lodash\";\r\nimport { data } from \"../stubData/stubData\";\r\n\r\nlet finalObj = [];\r\nconst flatArray = (data) =>\r\n  reduce(\r\n    data,\r\n    (result, obj) => {\r\n      const interimData = map(obj, (val) => val);\r\n      return [...result, ...interimData];\r\n    },\r\n    []\r\n  );\r\n\r\nconst getMonthAndYear = (date) => {\r\n  if (date) {\r\n    const splitDate = date.split(\"/\");\r\n    const month = splitDate[1];\r\n    const year = splitDate[2];\r\n    return { month: splitDate[1], year: splitDate[2] };\r\n  }\r\n  return { month: \"\", year: \"\" };\r\n};\r\n\r\n/**\r\n * make an axios/Ajax call\r\n * async () => { ... await axios.get(....)}\r\n * as data is already object skipping this step\r\n */\r\nexport const getCountries = () => {\r\n  const { countries } = data;\r\n\r\n  return reduce(\r\n    countries,\r\n    (result, value) => {\r\n      const { country, date, city, temp } = value;\r\n      const { month, year } = getMonthAndYear(date);\r\n      return [\r\n        ...result,\r\n        {\r\n          country,\r\n          city,\r\n          temp,\r\n          month,\r\n          year,\r\n        },\r\n      ];\r\n    },\r\n    []\r\n  );\r\n};\r\n\r\nconst calculateValues = (data, key) => {\r\n  return reduce(\r\n    data,\r\n    (result, value) => {\r\n      const { month, year, temp, country, city } = value;\r\n      const id = value[key];\r\n      if (!result[id]) {\r\n        result[id] = {\r\n          month,\r\n          temp: temp,\r\n          avg: temp,\r\n          maxTemp: temp,\r\n          minTemp: temp,\r\n          count: 1,\r\n          country,\r\n          city,\r\n          year,\r\n        };\r\n      } else {\r\n        result[id].count += 1;\r\n        result[id].maxTemp =\r\n          temp > result[id].maxTemp ? temp : result[id].maxTemp;\r\n        result[id].minTemp =\r\n          temp < result[id].minTemp ? temp : result[id].minTemp;\r\n        result[id].temp += temp;\r\n        result[id].avg = parseInt(result[id].temp / result[id].count).toFixed(\r\n          2\r\n        );\r\n      }\r\n      return { ...result };\r\n    },\r\n    {}\r\n  );\r\n};\r\n\r\nconst initReduce = (data, key) => {\r\n  return reduce(\r\n    data,\r\n    (result, value) => {\r\n      const id = value[key];\r\n      if (result[id]) result[id] = [...result[id], { ...value }];\r\n      else result[id] = [{ ...value }];\r\n      return { ...result };\r\n    },\r\n    {}\r\n  );\r\n};\r\n\r\nconst genericReducer = (returnedData, keys, curr) =>\r\n  reduce(\r\n    returnedData,\r\n    (result, data, id) => {\r\n      if (curr + 1 === keys.length) {\r\n        const newData = calculateValues(data, keys[curr]);\r\n        finalObj = [...finalObj, { ...newData }];\r\n        result[id] = newData;\r\n      }\r\n      if (curr + 1 < keys.length) {\r\n        const reducedData = initReduce(data, keys[curr]);\r\n        result[id] = genericReducer(reducedData, keys, curr + 1);\r\n      }\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n\r\nexport const filterCountries = (data, groupBy, keys) => {\r\n  const filteredData = initReduce(data, groupBy);\r\n  genericReducer(filteredData, keys, 0);\r\n  const flattenedArray = flatArray(finalObj);\r\n  finalObj = [];\r\n  return flattenedArray;\r\n};\r\n\r\nexport const filterCityMonth = (dataSet, city, month) => {\r\n  let data = [...dataSet];\r\n  if (city) {\r\n    data = filter(data, (x) => x.city === city);\r\n  }\r\n  if (month) {\r\n    data = filter(data, (x) => x.month === month);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const sortData = (dataSet, sort) => {\r\n  let data = [...dataSet];\r\n  if (sort) {\r\n    return orderBy(data, [\"temp\"], [sort]);\r\n  }\r\n  return data;\r\n};\r\n","C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\stubData\\stubData.js",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.jsx",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Container\\Countries.styles.jsx",[],"C:\\Users\\vikram\\code\\pearson1\\pearson\\src\\Component\\TableComponent.styles.jsx",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":1,"column":8,"nodeType":"52","messageId":"53","endLine":1,"endColumn":12},{"ruleId":"50","severity":1,"message":"54","line":18,"column":11,"nodeType":"52","messageId":"53","endLine":18,"endColumn":16},{"ruleId":"50","severity":1,"message":"55","line":19,"column":11,"nodeType":"52","messageId":"53","endLine":19,"endColumn":15},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'month' is assigned a value but never used.","'year' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]